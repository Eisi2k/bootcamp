Description
In den meisten Challenges geht es nicht nur darum, ein Programm zu schreiben, das zu einem gegebenen Input einen bestimmten Output produziert, sondern auch darum, dieses Programm möglichst effizient zu machen. Für die Ausführung des Programms steht nur eine begrenzte Zeit zur Verfügung (siehe unten). Ist das Programm nach Ablauf dieses Zeit-Limits (in dieser Einführungschallenge eine Sekunde) nicht fertig, gilt der entsprechende Testfall und damit die Teilaufgabe als durchgefallen.

In dieser Challenge ist die Aufgabe, für eine gegebene natürliche Zahl 
�
n, die Summe der ersten 
�
n natürlichen Zahlen zu berechnen. Eine mögliche Lösung dafür ist, über die ersten 
�
n natürlichen Zahlen zu iterieren und diese dabei zu addieren. Die Laufzeit dieser Lösung ist allerdings proportional zu 
�
n, was in der zweiten Teilaufgabe problematisch wird, da bis zu zwei Milliarden Zahlen addiert werden müssten, was extrem lange dauern würde. Eine bessere Lösung wäre hier zum Beispiel die Gaußsche Summenformel 
∑
�
=
1
�
�
=
�
(
�
+
1
)
2
∑ 
k=1
n
​
 k= 
2
n(n+1)
​
 , mit der sich die Summe der ersten 
�
n natürlichen Zahlen in konstanter Zeit berechnen lässt.

Hinweis: Beim Implementieren der Gaußschen Summenformel ist unbedingt darauf zu achten, dass ausschließlich mit Integers und nicht mit Floats gerechnet wird, da letztere zu ungenau für die in Task 2 relevanten Zahlen sind. Ein häufig auftretendes Problem insbesondere in Python ist, dass beim Teilen durch 2 zum Schluss ein Float entsteht, der leider zu ungenau ist. Statt mit dem / Operator (float division) durch 2 zu teilen und den Float anschließend in einen Integer umzuwandeln, kann der // Operator (integer division) genutzt werden, womit bei der Division direkt ein Integer zurückgegeben wird, wobei keine Genauigkeit verloren gehen sollte.

Eingabe:

Zeile 1: Die Zahl 
�
n
Ausgabe:

Zeile 1: Die Summe der ersten 
�
n natürlichen Zahlen 
∑
�
=
1
�
�
∑ 
k=1
n
​
 k
In most challenges, the goal is not only to write a program that produces a certain output for a given input, but also to make this program as efficient as possible. Only a limited time is available for the execution of the program (see below). If the program is not finished after this time limit (in this introduction challenge one second), the corresponding test case and thus the subtask is considered as failed.

In this challenge, the task is to calculate the sum of the first 
�
n natural numbers for a given natural number 
�
n. A possible solution for this is to iterate over the first 
�
n natural numbers, adding them together. However, the execution time of this solution is proportional to 
�
n, which becomes problematic in the second sub-task, since up to two billion numbers would have to be added, which would take an extremely long time. A better solution here would be, for example, the Gaussian summation formula 
∑
�
=
1
�
�
=
�
(
�
+
1
)
2
∑ 
k=1
n
​
 k= 
2
n(n+1)
​
 , which can be used to calculate the sum of the first 
�
n natural numbers in constant time.

Note: When implementing the Gaussian summation formula, it is essential to make sure that you exclusively use integers and not floats in your calculations, since the latter are too imprecise for the numbers relevant in Task 2. A frequently occurring problem, especially in Python, is that dividing by 2 results in a float at the end, which is unfortunately too inaccurate. Instead of dividing by 2 using the / operator (float division) and then converting the float into an integer, the // operator (integer division) can be used, which directly returns an integer when dividing, whereby no precision should be lost.

Input:

Line 1: The number 
�
n
Output:

Line 1: The sum of the first 
�
n natural numbers 
∑
�
=
1
�
�
∑ 
k=1
n
​
 k
Limits
Time limit: 1 second
Memory limit: 256 MB
Maximum 50 Submissions (49 left)
Maximum submission size: 5000 bytes
